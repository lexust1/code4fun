# Сдать решение задачи B-Проверка матрицы смежности
# По заданной квадратной матрице n×n из нулей и единиц определите,
# может ли данная матрица быть матрицей смежности простого
# неориентированного графа.
#
# Формат входных данных
# На вход программы поступает число n ( 1 <= n <= 100) – размер матрицы,
# а затем n строк по n чисел, каждое из которых равно 0 или 1, –
# сама матрица.
#
# Формат выходных данных
# Выведите «YES», если приведенная матрица может быть матрицей
# смежности простого неориентированного графа, и «NO» в противном случае.
#
# Примеры
# Ввод	            Вывод
# 7                   YES
# 0 1 0 0 0 1 1
# 1 0 1 0 0 0 0
# 0 1 0 0 1 1 0
# 0 0 0 0 0 0 0
# 0 0 1 0 0 1 0
# 1 0 1 0 1 0 0
# 1 0 0 0 0 0 0
#
def create_input_data():
    adj_matrix = []
    n = 0
    cnt = 0
    while True:
        inp = input()
        if inp == " ":
            break
        if cnt == 0:
            n = int(inp)
        else:
            adj_matrix.append([int(el) for el in inp.split()])
        cnt += 1
    return n, adj_matrix


def is_simple_undirected_graph(n, adj_matrix):
    """
    Проверяет, представляет ли матрица смежности простой неориентированный граф.

    Аргументы:
        n (int): число вершин в графе.
        adj_matrix (List[List[int]]): матрица смежности графа.

    Возвращает:
        str: "YES", если граф простой и неориентированный, "NO" в противном случае.
    """
    # итерация по строкам
    for i in range(n):
        # итерация от i до n, c i, чтобы не бегать излишне по элементам
        # под диагональю, но при этом все-таки захватывать элементы
        # диагонали
        for j in range(i, n):
            # проверка на нули по диагонали, что нет петель
            if i == j and adj_matrix[i][j] != 0:
                return "NO"
            # проверка симметричности, характерно для ненаправленного г
            # рафа.
            if adj_matrix[i][j] != adj_matrix[j][i]:
                return "NO"
    return "YES"


def main():
    # print(create_input_data())
    arr1 = (5, [[0, 1, 0, 0, 0], [1, 0, 1, 0, 0], [0, 1, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0]])
    arr2 = (5, [[0, 1, 0, 0, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0]])
    arr3 = (5, [[0, 1, 0, 0, 0], [1, 0, 1, 0, 0], [0, 1, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
    arr4 = (
        7,
        [
            [0, 1, 0, 0, 0, 1, 1],
            [1, 0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 1, 0],
            [1, 0, 1, 0, 1, 0, 0],
            [1, 0, 0, 0, 0, 0, 0]
        ]
    )
    print(is_simple_undirected_graph(*arr1))
    print(is_simple_undirected_graph(*arr2))
    print(is_simple_undirected_graph(*arr3))
    print(is_simple_undirected_graph(*arr4))


if __name__ == "__main__":
    main()
