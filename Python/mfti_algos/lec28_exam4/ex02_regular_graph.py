# Сдать решение задачи B-Регулярный граф
#
# Неориентированный граф называется регулярным, если все его вершины
# имеют одинаковую степень. Для заданного списком ребер графа
# проверьте, является ли он регулярным.
#
# Формат входных данных
# Сначала вводятся числа n ( 1 ≤ n ≤ 100) – количество вершин в графе
# и m ( 0 ≤ m ≤ n(n - 1)/2) – количество ребер. Затем следует m пар
# чисел – ребра графа. Нумерация вершин с 0.
#
# Формат выходных данных
# Выведите «YES», если граф является регулярным, и «NO» в противном
# случае.
#
# Примеры
# Ввод	Вывод
# 2 1     YES
# 0 1
#
def create_adj_list():
    # Задаем число ребер (m) и вершин (n) графа
    n, m = [int(x) for x in input().split()]
    graph = {str(i): set() for i in range(n)}
    # Проходим по всем ребрам графа
    for _ in range(m):
        # Считываем вершины, соединенные ребром
        v1, v2 = input().split()
        # Т.к. граф не направленный, смотри в обоих направлениях
        for v, u in (v1, v2), (v2, v1):
            graph[v].add(u)
    return graph


def is_regular(graph):
    """
    Проверяет, является ли граф регулярным, то есть все ли вершины
    имеют одинаковую степень.

    Args:
    graph (dict): Граф представленный в виде словаря, где ключи - это
    вершины, а значения - списки смежных вершин.

    Returns:
    str: "YES", если граф регулярный, "NO" в противном случае.
    """
    # Получаем степень первой вершины
    start = list(graph.keys())[0]
    len_adj = len(graph[start])
    # Проверяем, одинакова ли степень у всех вершин
    for vertex in graph:
        if len(graph[vertex]) != len_adj:
            return "NO"
    return "YES"


def main():
    # graph = create_adj_list()
    # print(graph)
    graph = {
        '0': {'3', '2', '1'},
        '1': {'0', '3', '2'},
        '2': {'0', '3', '1'},
        '3': {'0', '2', '1'}
    }
    print(is_regular(graph))
    graph = {
        '0': {'3', '1'},
        '1': {'0', '3', '2'},
        '2': {'3', '1'},
        '3': {'0', '2', '1'}
    }
    print(is_regular(graph))
    graph = {
        '0': {'1', '2'},
        '1': {'0', '2'},
        '2': {'0', '1'},
    }
    print(is_regular(graph))


if __name__ == "__main__":
    main()
