## [Процедура приёма зачёта](http://judge.mipt.ru/mipt_cs_on_python3/labs/lab17.html#id9)

Оценка по информатике ставится в результате устного ответа на дифференцированном зачёте. Присутствие на зачёте для постановки оценки обязательно!

Сдача происходит по билетам. В билете содержится два вопроса из основного списка. На подготовку студенту отводится не более 20 минут. Преподаватель слушает ответы на вопросы в билете, а также может задать от одного до трёх дополнительных вопросов, как из основного списка, так и любых других по программе курса.

Использование на зачёте любых цифровых и бумажных носителей информации студентом недопустимо! Допустимы только ручка и бумага.

**[Список вопросов](http://judge.mipt.ru/mipt_cs_on_python3/labs/lab17.html#id10)**
1. Ссылочная модель данных в Python. Операторы == и is. Сборщик мусора.
2. Операторы присваивания в Python. Множественное присваивание и варианты обмена переменных значениями.
3. Операторы if, elif, else. Цикл while, операторы break, continue, else.
4. Цикл for, операторы break, continue, else. Функция range().
5. Операции алгебры логики. Таблицы истинности И, ИЛИ, НЕ, XOR, импликации и эквиваленции.
6. Законы алгебры логики. Свойства операций И и ИЛИ. Законы де Моргана.
7. Дизъюнктивная нормальная форма.
8. Позиционные системы счисления. Перевод числа из 10-й в произвольную систему счисления и наоборот.
9. Связь 2-й, 4-й, 8-й и 16-й систем счисления. Примеры и обоснование.
10. Проверка последовательности чисел на наличие элемента с заданными свойствами и на соответствие всех элементов заданному свойству.
11. Однопроходные алгоритмы обработки последовательности: подсчёт, сумма, произведение.
12. Поиск максимума и подсчёт количества элементов, равных максимальному.
13. Нахождение трёх максимальных элементов в последовательности за один проход.
14. Поиск местоположения максимума в последовательности за один проход.
15. Проверка простоты числа. Метод грубой силы.
16. Разложение числа на множители.
17. Решето Эратосфена.
18. Добавление и удаление элемента в начале и в конце массива «вручную» (без append, insert, присваивания в срез и т. п.).
19. Алгоритм обращения чисел в массиве. Реализация циклом, без срезов.
20. Алгоритм циклического сдвига в массиве. Реализация циклом, без срезов.
21. Проверка упорядоченности массива за O(N).
22. Сортировка вставками.
23. Сортировка выбором.
24. Сортировка методом пузырька.
25. Сортировка подсчётом.
26. Быстрая сортировка Хоара.
27. Сортировка слиянием.
28. Рекурсия. Прямой и обратный ход рекурсии. Стек вызовов при рекурсии. Вычисление факториала.
29. Алгоритм Евклида. Реализация через цикл и через рекурсию.
30. Быстрое возведение в степень.
31. Вычисление чисел Фибоначчи.
32. Ханойские башни.
33. Рекурсивная генерация всех чисел длины M.
34. Генерация всех перестановок (рекурсивная).
35. Динамическое программирование. Сходства с рекурсией и отличия от неё.
36. Задача о количестве траекторий Кузнечика на числовой прямой.
37. Задача о траектории наименьшей стоимости для Кузнечика. Восстановление траектории наименьшей стоимости.
38. Вычисление расстояния Левенштейна.
39. Наибольшая общая подпоследовательность.
40. Наибольшая возрастающая подпоследовательность.
41. Проверки корректности скобочной последовательности с помощью стека.
42. Обратная Польская нотация. Вычисление выражения при помощи стека.
43. Наивный поиск подстроки в строке. Реализация без использования стандартных методов str.
44. Z-функция строки. Наивное вычисление и его оптимизация. Z-алгоритм.
45. Префикс-функция. Алгоритм Кнута-Морриса-Пратта.

## [Оценка на зачёте](http://judge.mipt.ru/mipt_cs_on_python3/labs/lab17.html#id11)

Основанием для рейтинговой оценки служат три оценки:

1. Контрольная №1
2. Контрольная №2
3. Средняя оценка за все контесты

Преподаватель, экзаменующий студента, видит все эти оценки по отдельности, а также рекомендуемую итоговую оценку, которая вычисляется по этим пяти оценкам автоматически. Исходя из ответа студента итоговая оценка в зачётку может быть отклонена от рекомендуемой на ±2 балла (по 10-балльной шкале). Если преподаватель хочет повысить или понизить оценку на большее число баллов, он советуется с лектором, присутствующим на зачёте.

Студент при несогласии с итоговой оценкой может потребовать апелляции у старшего преподавателя, но за это придётся рискнуть 1 баллом. Если апелляция не будет успешной, и старший преподаватель полностью согласится с преподавателем-экзаменатором в его оценке знаний студента, то итоговая оценка будет *понижена* на 1 балл (по 10-балльной шкале).

## [Почему дифференцированный зачёт сдаётся устно](http://judge.mipt.ru/mipt_cs_on_python3/labs/lab17.html#id12)

1. Во-первых, это возможность проверить знание студентом тем, вошедших в курс лекций, но не вошедших прямо в лабораторные работы.
2. Во-вторых, устный ответ расширяет у студента актив понятийного аппарата информатики, развивает умение связно излагать свои мысли на языке предмета.
3. В-третьих, устный ответ даёт возможность преподавателю осознать уровень самостоятельности студента при написании им лабораторных работ.
4. В-четвёртых, устный ответ позволяет студенту, продемонстрировавшему свои знания на зачёте, повысить оценку, которая получается исходя из рейтинга за работы в семестре.
5. И в пятых, повторение материала лекций в конце семестра приводит к лучшему запоминанию материала и откладыванию его в долгую память.

Успехов в подготовке к зачёту!