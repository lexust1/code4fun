# Хэш-таблица — это структура данных, предоставляющая быстрый доступ к элементам.
# Она использует хэш-функцию для преобразования ключей в индексы массива.

# Ключевые аспекты хэш-таблицы:

# 1. Хэш-функция:
#    Функция, которая принимает ключ и возвращает индекс для хранения значения.
#    Идеальная хэш-функция распределяет ключи равномерно по массиву.

# 2. Коллизии:
#    Ситуация, когда разные ключи имеют одинаковый хэш.
#    Решается методами, такими как цепочки (связные списки) или открытая адресация.

# 3. Масштабируемость:
#    При увеличении количества элементов размер хэш-таблицы может быть изменен.
#    Это включает создание новой таблицы большего размера и перехеширование элементов.

# 4. Применение:
#    Хэш-таблицы используются в базах данных, кэшировании, поиске объектов и
#    для реализации ассоциативных массивов из-за их высокой эффективности.

# Коллизии в хэш-таблицах и методы их разрешения:

# 1. Закрытая Адресация (Separate Chaining):
#    - Каждая ячейка хэш-таблицы содержит указатель на структуру данных (например, связный список),
#      которая хранит все элементы с одинаковым хэшем.
#    - Преимущество: хэш-таблица может хранить больше элементов, чем у неё ячеек.
#    - Используется когда важна гибкость управления большим количеством коллизий.
#    Пример:
# Представьте хэш-таблицу размером 4. Используется простая хэш-функция, которая присваивает
# каждому ключу индекс от 0 до 3.
#    Хэш-таблица размером 4:
#    [0] -> ["apple", "value1"]
#    [1] -> Пусто
#    [2] -> ["banana", "value2"] -> ["grape", "value3"]
#    [3] -> Пусто
# Здесь ключи "banana" и "grape" привели к коллизии, поэтому они помещаются в одну ячейку,
# но хранятся в связном списке внутри этой ячейки.

# 2. Открытая Адресация:
#    - Элементы хранятся непосредственно в хэш-таблице, и при коллизии производится поиск другой свободной ячейки.
#    - Включает методы как Линейное Разрешение Коллизий, Квадратичное Разрешение и Двойное Хеширование.
#    - Преимущество: простота реализации и хранения данных без внешних структур.
#    - Используется для эффективного управления памятью и когда вероятность коллизий относительно низка.
# Рассмотрим ту же хэш-таблицу размером 4 с такой же хэш-функцией.
#    Пример:
#    Хэш-таблица размером 4:
#    [0] -> ["apple", "value1"]
#    [1] -> ["banana", "value2"]
#    [2] -> Пусто
#    [3] -> ["grape", "value3"]
# Здесь ключ "grape" изначально должен был поместиться в ячейку 2, но поскольку она уже была
# занята ключом "banana", "grape" был помещен в следующую доступную ячейку — ячейку 3.

# Выбор метода зависит от специфики применения, требований к производительности и объему данных.

# Асимптотическая сложность операций в хэш-таблицах:

# В идеальном случае, когда коллизии минимальны или отсутствуют, операции вставки, поиска и удаления
# в хэш-таблице могут быть выполнены за амортизированное время O(1). Однако наличие коллизий
# и выбранный метод их разрешения могут повлиять на производительность.

# 1. Вставка (Insertion):
#    - Средний случай: O(1)
#    - Худший случай: O(n), где n - количество элементов в таблице, происходит при высокой степени коллизий.

# 2. Поиск (Search):
#    - Средний случай: O(1)
#    - Худший случай: O(n), особенно при использовании метода цепочек, если все элементы оказались в одной цепочке.

# 3. Удаление (Deletion):
#    - Средний случай: O(1)
#    - Худший случай: O(n), аналогично поиску, зависит от степени коллизий и метода их разрешения.

# Заметка: Эффективность хэш-таблицы сильно зависит от качества хэш-функции и загрузки таблицы.
# Хорошая хэш-функция равномерно распределяет ключи, минимизируя коллизии, тем самым приближая
# асимптотическую сложность к идеальному случаю.
