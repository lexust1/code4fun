# Матрица смежности для хранения графа
#
# Матрица смежности - это метод представления графа в виде двумерного массива,
# где каждая ячейка отражает наличие или отсутствие ребра между парой вершин.
#
# Основные аспекты матрицы смежности:
#
# 1. Вершины и рёбра: Граф состоит из вершин (узлов) и рёбер. Матрица смежности
#    использует строки и столбцы для представления этих вершин, а значения в
#    ячейках отражают наличие рёбер между ними.
#
# 2. Структура матрицы: Для графа с N вершинами матрица смежности будет иметь
#    размер N x N, где каждая строка и столбец представляет вершину.
#
# 3. Значения в матрице: Если между вершиной i и вершиной j существует ребро,
#    то элемент матрицы [i][j] и [j][i] равен 1 (или весу ребра в взвешенном
#    графе). Если ребра нет, то элемент равен 0.
#
# 4. Направленные и ненаправленные графы: В ненаправленных графах матрица
#    смежности симметрична относительно главной диагонали, так как ребро между
#    вершинами i и j одновременно является ребром между j и i. В направленных
#    графах это не так, и наличие ребра от i к j не гарантирует наличие ребра
#    от j к i.
#
# 5. Эффективность: Матрица смежности эффективна для плотных графов, где
#    количество рёбер близко к максимально возможному. Для разреженных графов
#    она неэффективна с точки зрения использования памяти, так как большая
#    часть матрицы будет заполнена нулями.
#
# 6. Операции: Проверка наличия ребра между двумя вершинами в матрице смежности
#    занимает постоянное время, но добавление или удаление ребра (или вершины)
#    может быть более затратным с точки зрения времени и памяти.
#
# 7. Память: Матрица смежности требует O(N^2) памяти, где N - количество вершин
#    в графе.
#
# Пример матрицы смежности для небольшого ненаправленного графа

# 3 4
# a b
# b c
# c d

def create_adj_matrix():
    # Задаем число ребер (M) и вершин (N) графа
    M, N = [int(x) for x in input().split()]
    # Создаем список вершин (V) и словарь для отслеживания индексов каждой вершины (index)
    V = []
    index = {}
    # Инициализация матрицы смежности размером N x N (N вершин)
    A = [[0] * N for _ in range(N)]
    # Проходим через M ребер графа (вводим их и размещаем в матрице смежности)
    for _ in range(M):
        # Считываем две вершины, соединенные ребром
        v1, v2 = input().split()
        # Для каждой вершины в ребре
        for v in v1, v2:
            # Если вершина еще не добавлена, добавляем ее в список V и в словарь index
            if v not in index:
                V.append(v)
                index[v] = len(V) - 1
        # Получаем индексы вершин в матрице смежности
        v1_idx = index[v1]
        v2_idx = index[v2]
        # Устанавливаем соответствующие значения в матрице смежности в 1 (наличие ребра)
        A[v1_idx][v2_idx] = 1
        A[v2_idx][v1_idx] = 1
    return A


def main():
    print(create_adj_matrix())


if __name__ == "__main__":
    main()
