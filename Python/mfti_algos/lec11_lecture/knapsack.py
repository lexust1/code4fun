# Итак, каждый раз, когда мы рассматриваем новый предмет, мы выбираем
# между двумя вариантами:
# - либо взять его (если это увеличит общую ценность и не превысит
# ограничение по весу),
# - либо не брать (если без него можно достичь более высокой ценности в
# рамках заданного веса).
#
# Этот процесс повторяется для каждого предмета,
# что приводит к определению оптимальной комбинации предметов в рюкзаке.
#
def knapsack(max_weight, weights, values):
    """
    Решает задачу о рюкзаке с помощью динамического программирования.

    Args:
    max_weight: Максимально допустимый вес, который может вместить
        рюкзак.
    weights: Список весов предметов.
    values: Список значений (ценностей) предметов.

    Returns:
    int: Максимальная общая ценность предметов, которые можно поместить
        в рюкзак.
    """
    # Количество предметов
    n = len(values)
    # Создание таблицы для хранения промежуточных результатов
    # Размер таблицы - (n+1) строк на (max_weight+1) столбцов
    dp = [[0] * (max_weight + 1) for _ in range(n + 1)]
    # Построение таблицы dp
    for i in range(1, n + 1):  # Итерация по предметам
        for j in range(1, max_weight + 1):  # Итерация по возможным весам
            # Проверка, можно ли взять текущий предмет (i-1)
            if weights[i - 1] <= j:
                # Выбор максимальной ценности между вариантом взять предмет и не взять
                dp[i][j] = max(
                    dp[i - 1][j],  # Не брать предмет, использовать предыдущее значение
                    values[i - 1] + dp[i - 1][j - weights[i - 1]]  # Брать предмет, учитывая стоимость текущего предмета и сколько еще можно засунуть в оставшееся пространство.
                )
            else:
                # Если предмет не помещается, копировать значение из предыдущей строки
                dp[i][j] = dp[i - 1][j]

    # Возвращение результата из последней ячейки таблицы
    return dp[-1][-1]


def main():
    max_weight = 4
    weights = [1, 3, 4]
    values = [1500, 2000, 3000]
    print(knapsack(max_weight, weights, values))


if __name__ == "__main__":
    main()
