# Упражнение №2
# Решите задачу о количестве способов достичь точки n из точки 1, если
# кузнечик умеет прыгать +1, +2 и *3.
def traj_num(N):
    """Кол-во траекторий, если кузнечик прыгает на +1, +2 или +3."""
    # Кузнечик может прыгать на 1, 2 или *3 единицы вправо.
    # Необходимо определить количество различных маршрутов, чтобы
    # добраться до точки n.
    #
    # Для этого используем динамическое программирование:
    # f(n) - количество маршрутов для достижения точки n.
    #
    # Кузнечик может попасть в точку n двумя способами:
    # 1. Прыжок из точки n-1 (на одну единицу).
    # 2. Прыжок из точки n-2 (на две единицы).
    # 3. Прыжок из точки n/3 (на * три единицы).
    #
    # Таким образом, f(n) = f(n-1) + f(n-2) + f(n/3)
    # Это означает, что количество маршрутов в точку n равно сумме
    # маршрутов в точки n-1, n-2 и n/3.
    # Используя эти начальные условия и рекурсивное соотношение,
    # мы можем вычислить f(n) для любого n.
    K = [0, 1, 1] + [0] * (N - 2)
    for i in range(3, N + 1):
        # Случай, когда можно прыгнуть на *3 яч, чтобы
        # попасть в текущую.
        if (i - 1) % 3 == 0:
            K[i] = K[i - 2] + K[i - 1] + K[(i - 1) // 3]
        # На *3 ячейки прыгнуть нельзя.
        else:
            K[i] = K[i - 2] + K[i - 1]
    return K[N]


def main():
    N = 5
    print(traj_num(N))


if __name__ == "__main__":
    main()
